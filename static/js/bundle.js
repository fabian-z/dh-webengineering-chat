/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jdenticon/dist/jdenticon-module.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/jdenticon/dist/jdenticon-module.mjs ***!
  \**********************************************************/
/*! exports provided: bundle, configure, drawIcon, toSvg, update, updateCanvas, updateSvg, version */
/*! exports used: toSvg */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export bundle */\n/* unused harmony export configure */\n/* unused harmony export drawIcon */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return toSvg; });\n/* unused harmony export update */\n/* unused harmony export updateCanvas */\n/* unused harmony export updateSvg */\n/* unused harmony export version */\n/**\r\n * Jdenticon 3.0.1\r\n * http://jdenticon.com\r\n *\r\n * Built: 2020-08-03T16:58:18.496Z\r\n * \r\n * MIT License\r\n * \r\n * Copyright (c) 2014-2020 Daniel Mester Pirttij√§rvi\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * Parses a substring of the hash as a number.\r\n * @param {number} startPosition \r\n * @param {number=} octets \r\n * @noinline\r\n */\r\nfunction parseHex(hash, startPosition, octets) {\r\n    return parseInt(hash.substr(startPosition, octets), 16);\r\n}\n\nfunction decToHex(v) {\r\n    v |= 0; // Ensure integer value\r\n    return v < 0 ? \"00\" :\r\n        v < 16 ? \"0\" + v.toString(16) :\r\n        v < 256 ? v.toString(16) :\r\n        \"ff\";\r\n}\r\n\r\nfunction hueToRgb(m1, m2, h) {\r\n    h = h < 0 ? h + 6 : h > 6 ? h - 6 : h;\r\n    return decToHex(255 * (\r\n        h < 1 ? m1 + (m2 - m1) * h :\r\n        h < 3 ? m2 :\r\n        h < 4 ? m1 + (m2 - m1) * (4 - h) :\r\n        m1));\r\n}\r\n\r\n/**\r\n * @param {string} color  Color value to parse. Currently hexadecimal strings on the format #rgb[a] and #rrggbb[aa] are supported.\r\n */\r\nfunction parseColor(color) {\r\n    if (/^#[0-9a-f]{3,8}$/i.test(color)) {\r\n        let result;\r\n\r\n        if (color.length < 6) {\r\n            const r = color[1],\r\n                  g = color[2],\r\n                  b = color[3],\r\n                  a = color[4] || \"\";\r\n            result = \"#\" + r + r + g + g + b + b + a + a;\r\n        }\r\n        if (color.length == 7 || color.length > 8) {\r\n            result = color;\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {string} hexColor  Color on the format \"#RRGGBB\" or \"#RRGGBBAA\"\r\n */\r\nfunction toCss3Color(hexColor) {\r\n    const a = parseHex(hexColor, 7, 2);\r\n    let result;\r\n\r\n    if (isNaN(a)) {\r\n        result = hexColor;\r\n    } else {\r\n        const r = parseHex(hexColor, 1, 2),\r\n            g = parseHex(hexColor, 3, 2),\r\n            b = parseHex(hexColor, 5, 2);\r\n        result = \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + (a / 255).toFixed(2) + \")\";\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * @param h Hue [0, 1]\r\n * @param s Saturation [0, 1]\r\n * @param l Lightness [0, 1]\r\n */\r\nfunction hsl(h, s, l) {\r\n    // Based on http://www.w3.org/TR/2011/REC-css3-color-20110607/#hsl-color\r\n    let result;\r\n\r\n    if (s == 0) {\r\n        const partialHex = decToHex(l * 255);\r\n        result = partialHex + partialHex + partialHex;\r\n    }\r\n    else {\r\n        const m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s,\r\n              m1 = l * 2 - m2;\r\n        result =\r\n            hueToRgb(m1, m2, h * 6 + 2) +\r\n            hueToRgb(m1, m2, h * 6) +\r\n            hueToRgb(m1, m2, h * 6 - 2);\r\n    }\r\n\r\n    return \"#\" + result;\r\n}\r\n\r\n// This function will correct the lightness for the \"dark\" hues\r\nfunction correctedHsl(h, s, l) {\r\n    // The corrector specifies the perceived middle lightness for each hue\r\n    const correctors = [ 0.55, 0.5, 0.5, 0.46, 0.6, 0.55, 0.55 ],\r\n          corrector = correctors[(h * 6 + 0.5) | 0];\r\n    \r\n    // Adjust the input lightness relative to the corrector\r\n    l = l < 0.5 ? l * corrector * 2 : corrector + (l - 0.5) * (1 - corrector) * 2;\r\n    \r\n    return hsl(h, s, l);\r\n}\n\n// In the future we can replace `GLOBAL` with `globalThis`, but for now use the old school global detection for\r\n// backward compatibility.\r\n\r\nconst GLOBAL = \r\n    typeof window !== \"undefined\" ? window :\r\n    typeof self !== \"undefined\" ? self :\r\n    typeof global !== \"undefined\" ? global :\r\n    {};\n\n/**\r\n * @noinline\r\n */\r\nconst ROOT_CONFIG_PROPERTY = \"config\";\r\n\r\nvar rootConfigurationHolder = {};\r\n\r\n/**\r\n * Sets a new icon style configuration. The new configuration is not merged with the previous one. * \r\n * @param {Object} newConfiguration - New configuration object.\r\n */\r\nfunction configure(newConfiguration) {\r\n    if (arguments.length) {\r\n        rootConfigurationHolder[ROOT_CONFIG_PROPERTY] = newConfiguration;\r\n    }\r\n    return rootConfigurationHolder[ROOT_CONFIG_PROPERTY];\r\n}\r\n\r\n/**\r\n * Gets the normalized current Jdenticon color configuration. Missing fields have default values.\r\n * @param {Object|number|undefined} paddingOrLocalConfig - Configuration passed to the called API method. A\r\n *    local configuration overrides the global configuration in it entirety. This parameter can for backward\r\n *    compatibility also contain a padding value. A padding value only overrides the global padding, not the\r\n *    entire global configuration.\r\n * @param {number} defaultPadding - Padding used if no padding is specified in neither the configuration nor\r\n *    explicitly to the API method.\r\n */\r\nfunction getConfiguration(paddingOrLocalConfig, defaultPadding) {\r\n    const configObject = \r\n            typeof paddingOrLocalConfig == \"object\" && paddingOrLocalConfig ||\r\n            rootConfigurationHolder[ROOT_CONFIG_PROPERTY] ||\r\n            GLOBAL[\"jdenticon_config\"] ||\r\n            { },\r\n\r\n        lightnessConfig = configObject[\"lightness\"] || { },\r\n        \r\n        // In versions < 2.1.0 there was no grayscale saturation -\r\n        // saturation was the color saturation.\r\n        saturation = configObject[\"saturation\"] || { },\r\n        colorSaturation = \"color\" in saturation ? saturation[\"color\"] : saturation,\r\n        grayscaleSaturation = saturation[\"grayscale\"],\r\n\r\n        backColor = configObject[\"backColor\"],\r\n        padding = configObject[\"padding\"];\r\n    \r\n    /**\r\n     * Creates a lightness range.\r\n     */\r\n    function lightness(configName, defaultRange) {\r\n        let range = lightnessConfig[configName];\r\n        \r\n        // Check if the lightness range is an array-like object. This way we ensure the\r\n        // array contain two values at the same time.\r\n        if (!(range && range.length > 1)) {\r\n            range = defaultRange;\r\n        }\r\n\r\n        /**\r\n         * Gets a lightness relative the specified value in the specified lightness range.\r\n         */\r\n        return function (value) {\r\n            value = range[0] + value * (range[1] - range[0]);\r\n            return value < 0 ? 0 : value > 1 ? 1 : value;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a hue allowed by the configured hue restriction,\r\n     * provided the originally computed hue.\r\n     */\r\n    function hueFunction(originalHue) {\r\n        const hueConfig = configObject[\"hues\"];\r\n        let hue;\r\n        \r\n        // Check if 'hues' is an array-like object. This way we also ensure that\r\n        // the array is not empty, which would mean no hue restriction.\r\n        if (hueConfig && hueConfig.length > 0) {\r\n            // originalHue is in the range [0, 1]\r\n            // Multiply with 0.999 to change the range to [0, 1) and then truncate the index.\r\n            hue = hueConfig[0 | (0.999 * originalHue * hueConfig.length)];\r\n        }\r\n\r\n        return typeof hue == \"number\" ?\r\n            \r\n            // A hue was specified. We need to convert the hue from\r\n            // degrees on any turn - e.g. 746¬∞ is a perfectly valid hue -\r\n            // to turns in the range [0, 1).\r\n            ((((hue / 360) % 1) + 1) % 1) :\r\n\r\n            // No hue configured => use original hue\r\n            originalHue;\r\n    }\r\n        \r\n    return {\r\n        P/*hue*/: hueFunction,\r\n        n/*colorSaturation*/: typeof colorSaturation == \"number\" ? colorSaturation : 0.5,\r\n        C/*grayscaleSaturation*/: typeof grayscaleSaturation == \"number\" ? grayscaleSaturation : 0,\r\n        o/*colorLightness*/: lightness(\"color\", [0.4, 0.8]),\r\n        D/*grayscaleLightness*/: lightness(\"grayscale\", [0.3, 0.9]),\r\n        F/*backColor*/: parseColor(backColor),\r\n        R/*iconPadding*/: \r\n            typeof paddingOrLocalConfig == \"number\" ? paddingOrLocalConfig : \r\n            typeof padding == \"number\" ? padding : \r\n            defaultPadding\r\n    }\r\n}\n\n/**\r\n * Represents a point.\r\n */\r\nclass Point {\r\n    /**\r\n     * @param {number} x \r\n     * @param {number} y \r\n     */\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\n\n/**\r\n * Translates and rotates a point before being passed on to the canvas context. This was previously done by the canvas context itself, \r\n * but this caused a rendering issue in Chrome on sizes > 256 where the rotation transformation of inverted paths was not done properly.\r\n */\r\nclass Transform {\r\n    /**\r\n     * @param {number} x The x-coordinate of the upper left corner of the transformed rectangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the transformed rectangle.\r\n     * @param {number} size The size of the transformed rectangle.\r\n     * @param {number} rotation Rotation specified as 0 = 0 rad, 1 = 0.5œÄ rad, 2 = œÄ rad, 3 = 1.5œÄ rad\r\n     */\r\n    constructor(x, y, size, rotation) {\r\n        this.p/*_x*/ = x;\r\n        this.q/*_y*/ = y;\r\n        this.G/*_size*/ = size;\r\n        this.S/*_rotation*/ = rotation;\r\n    }\r\n\r\n    /**\r\n     * Transforms the specified point based on the translation and rotation specification for this Transform.\r\n     * @param {number} x x-coordinate\r\n     * @param {number} y y-coordinate\r\n     * @param {number=} w The width of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n     * @param {number=} h The height of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n     */\r\n    H/*transformIconPoint*/(x, y, w, h) {\r\n        const right = this.p/*_x*/ + this.G/*_size*/,\r\n              bottom = this.q/*_y*/ + this.G/*_size*/,\r\n              rotation = this.S/*_rotation*/;\r\n        return rotation === 1 ? new Point(right - y - (h || 0), this.q/*_y*/ + x) :\r\n               rotation === 2 ? new Point(right - x - (w || 0), bottom - y - (h || 0)) :\r\n               rotation === 3 ? new Point(this.p/*_x*/ + y, bottom - x - (w || 0)) :\r\n               new Point(this.p/*_x*/ + x, this.q/*_y*/ + y);\r\n    }\r\n}\r\n\r\nconst NO_TRANSFORM = new Transform(0, 0, 0, 0);\n\n/**\r\n * Provides helper functions for rendering common basic shapes.\r\n */\r\nclass Graphics {\r\n    constructor(renderer) {\r\n        this.I/*_renderer*/ = renderer;\r\n        this.t/*_transform*/ = NO_TRANSFORM;\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the underlying renderer.\r\n     * @param {Array} points The points of the polygon clockwise on the format [ x0, y0, x1, y1, ..., xn, yn ]\r\n     * @param {boolean=} invert Specifies if the polygon will be inverted.\r\n     */\r\n    g/*addPolygon*/(points, invert) {\r\n        const di = invert ? -2 : 2, \r\n              transform = this.t/*_transform*/,\r\n              transformedPoints = [];\r\n        \r\n        for (let i = invert ? points.length - 2 : 0; i < points.length && i >= 0; i += di) {\r\n            transformedPoints.push(transform.H/*transformIconPoint*/(points[i], points[i + 1]));\r\n        }\r\n        \r\n        this.I/*_renderer*/.g/*addPolygon*/(transformedPoints);\r\n    }\r\n    \r\n    /**\r\n     * Adds a polygon to the underlying renderer.\r\n     * Source: http://stackoverflow.com/a/2173084\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n     * @param {number} size The size of the ellipse.\r\n     * @param {boolean=} invert Specifies if the ellipse will be inverted.\r\n     */\r\n    h/*addCircle*/(x, y, size, invert) {\r\n        const p = this.t/*_transform*/.H/*transformIconPoint*/(x, y, size, size);\r\n        this.I/*_renderer*/.h/*addCircle*/(p, size, invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a rectangle to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle.\r\n     * @param {number} w The width of the rectangle.\r\n     * @param {number} h The height of the rectangle.\r\n     * @param {boolean=} invert Specifies if the rectangle will be inverted.\r\n     */\r\n    i/*addRectangle*/(x, y, w, h, invert) {\r\n        this.g/*addPolygon*/([\r\n            x, y, \r\n            x + w, y,\r\n            x + w, y + h,\r\n            x, y + h\r\n        ], invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a right triangle to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the triangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the triangle.\r\n     * @param {number} w The width of the triangle.\r\n     * @param {number} h The height of the triangle.\r\n     * @param {number} r The rotation of the triangle (clockwise). 0 = right corner of the triangle in the lower left corner of the bounding rectangle.\r\n     * @param {boolean=} invert Specifies if the triangle will be inverted.\r\n     */\r\n    j/*addTriangle*/(x, y, w, h, r, invert) {\r\n        const points = [\r\n            x + w, y, \r\n            x + w, y + h, \r\n            x, y + h,\r\n            x, y\r\n        ];\r\n        points.splice(((r || 0) % 4) * 2, 2);\r\n        this.g/*addPolygon*/(points, invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a rhombus to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n     * @param {number} w The width of the rhombus.\r\n     * @param {number} h The height of the rhombus.\r\n     * @param {boolean=} invert Specifies if the rhombus will be inverted.\r\n     */\r\n    J/*addRhombus*/(x, y, w, h, invert) {\r\n        this.g/*addPolygon*/([\r\n            x + w / 2, y,\r\n            x + w, y + h / 2,\r\n            x + w / 2, y + h,\r\n            x, y + h / 2\r\n        ], invert);\r\n    }\r\n}\n\n/**\r\n * @param {number} index\r\n * @param {Graphics} g\r\n * @param {number} cell\r\n * @param {number} positionIndex\r\n */\r\nfunction centerShape(index, g, cell, positionIndex) {\r\n    index = index % 14;\r\n\r\n    let k, m, w, h, inner, outer;\r\n\r\n    !index ? (\r\n        k = cell * 0.42,\r\n        g.g/*addPolygon*/([\r\n            0, 0,\r\n            cell, 0,\r\n            cell, cell - k * 2,\r\n            cell - k, cell,\r\n            0, cell\r\n        ])) :\r\n\r\n    index == 1 ? (\r\n        w = 0 | (cell * 0.5), \r\n        h = 0 | (cell * 0.8),\r\n\r\n        g.j/*addTriangle*/(cell - w, 0, w, h, 2)) :\r\n\r\n    index == 2 ? (\r\n        w = 0 | (cell / 3),\r\n        g.i/*addRectangle*/(w, w, cell - w, cell - w)) :\r\n\r\n    index == 3 ? (\r\n        inner = cell * 0.1,\r\n        // Use fixed outer border widths in small icons to ensure the border is drawn\r\n        outer = \r\n            cell < 6 ? 1 :\r\n            cell < 8 ? 2 :\r\n            (0 | (cell * 0.25)),\r\n        \r\n        inner = \r\n            inner > 1 ? (0 | inner) : // large icon => truncate decimals\r\n            inner > 0.5 ? 1 :         // medium size icon => fixed width\r\n            inner,                    // small icon => anti-aliased border\r\n\r\n        g.i/*addRectangle*/(outer, outer, cell - inner - outer, cell - inner - outer)) :\r\n\r\n    index == 4 ? (\r\n        m = 0 | (cell * 0.15),\r\n        w = 0 | (cell * 0.5),\r\n        g.h/*addCircle*/(cell - w - m, cell - w - m, w)) :\r\n\r\n    index == 5 ? (\r\n        inner = cell * 0.1,\r\n        outer = inner * 4,\r\n\r\n        // Align edge to nearest pixel in large icons\r\n        outer > 3 && (outer = 0 | outer),\r\n        \r\n        g.i/*addRectangle*/(0, 0, cell, cell),\r\n        g.g/*addPolygon*/([\r\n            outer, outer,\r\n            cell - inner, outer,\r\n            outer + (cell - outer - inner) / 2, cell - inner\r\n        ], true)) :\r\n\r\n    index == 6 ? \r\n        g.g/*addPolygon*/([\r\n            0, 0,\r\n            cell, 0,\r\n            cell, cell * 0.7,\r\n            cell * 0.4, cell * 0.4,\r\n            cell * 0.7, cell,\r\n            0, cell\r\n        ]) :\r\n\r\n    index == 7 ? \r\n        g.j/*addTriangle*/(cell / 2, cell / 2, cell / 2, cell / 2, 3) :\r\n\r\n    index == 8 ? (\r\n        g.i/*addRectangle*/(0, 0, cell, cell / 2),\r\n        g.i/*addRectangle*/(0, cell / 2, cell / 2, cell / 2),\r\n        g.j/*addTriangle*/(cell / 2, cell / 2, cell / 2, cell / 2, 1)) :\r\n\r\n    index == 9 ? (\r\n        inner = cell * 0.14,\r\n        // Use fixed outer border widths in small icons to ensure the border is drawn\r\n        outer = \r\n            cell < 4 ? 1 :\r\n            cell < 6 ? 2 :\r\n            (0 | (cell * 0.35)),\r\n\r\n        inner = \r\n            cell < 8 ? inner : // small icon => anti-aliased border\r\n            (0 | inner),       // large icon => truncate decimals\r\n\r\n        g.i/*addRectangle*/(0, 0, cell, cell),\r\n        g.i/*addRectangle*/(outer, outer, cell - outer - inner, cell - outer - inner, true)) :\r\n\r\n    index == 10 ? (\r\n        inner = cell * 0.12,\r\n        outer = inner * 3,\r\n\r\n        g.i/*addRectangle*/(0, 0, cell, cell),\r\n        g.h/*addCircle*/(outer, outer, cell - inner - outer, true)) :\r\n\r\n    index == 11 ? \r\n        g.j/*addTriangle*/(cell / 2, cell / 2, cell / 2, cell / 2, 3) :\r\n\r\n    index == 12 ? (\r\n        m = cell * 0.25,\r\n        g.i/*addRectangle*/(0, 0, cell, cell),\r\n        g.J/*addRhombus*/(m, m, cell - m, cell - m, true)) :\r\n\r\n    // 13\r\n    (\r\n        !positionIndex && (\r\n            m = cell * 0.4, w = cell * 1.2,\r\n            g.h/*addCircle*/(m, m, w)\r\n        )\r\n    );\r\n}\r\n\r\n/**\r\n * @param {number} index\r\n * @param {Graphics} g\r\n * @param {number} cell\r\n */\r\nfunction outerShape(index, g, cell) {\r\n    index = index % 4;\r\n\r\n    let m;\r\n\r\n    !index ?\r\n        g.j/*addTriangle*/(0, 0, cell, cell, 0) :\r\n        \r\n    index == 1 ?\r\n        g.j/*addTriangle*/(0, cell / 2, cell, cell / 2, 0) :\r\n\r\n    index == 2 ?\r\n        g.J/*addRhombus*/(0, 0, cell, cell) :\r\n\r\n    // 3\r\n    (\r\n        m = cell / 6,\r\n        g.h/*addCircle*/(m, m, cell - 2 * m)\r\n    );\r\n}\n\n/**\r\n * Gets a set of identicon color candidates for a specified hue and config.\r\n */\r\nfunction colorTheme(hue, config) {\r\n    hue = config.P/*hue*/(hue);\r\n    return [\r\n        // Dark gray\r\n        correctedHsl(hue, config.C/*grayscaleSaturation*/, config.D/*grayscaleLightness*/(0)),\r\n        // Mid color\r\n        correctedHsl(hue, config.n/*colorSaturation*/, config.o/*colorLightness*/(0.5)),\r\n        // Light gray\r\n        correctedHsl(hue, config.C/*grayscaleSaturation*/, config.D/*grayscaleLightness*/(1)),\r\n        // Light color\r\n        correctedHsl(hue, config.n/*colorSaturation*/, config.o/*colorLightness*/(1)),\r\n        // Dark color\r\n        correctedHsl(hue, config.n/*colorSaturation*/, config.o/*colorLightness*/(0))\r\n    ];\r\n}\n\n/**\r\n * Draws an identicon to a specified renderer.\r\n */\r\nfunction iconGenerator(renderer, hash, config) {\r\n    config = getConfiguration(config, 0.08);\r\n\r\n    // Set background color\r\n    if (config.F/*backColor*/) {\r\n        renderer.m/*setBackground*/(config.F/*backColor*/);\r\n    }\r\n    \r\n    // Calculate padding and round to nearest integer\r\n    let size = renderer.k/*iconSize*/;\r\n    const padding = (0.5 + size * config.R/*iconPadding*/) | 0;\r\n    size -= padding * 2;\r\n    \r\n    const graphics = new Graphics(renderer);\r\n    \r\n    // Calculate cell size and ensure it is an integer\r\n    const cell = 0 | (size / 4);\r\n    \r\n    // Since the cell size is integer based, the actual icon will be slightly smaller than specified => center icon\r\n    const x = 0 | (padding + size / 2 - cell * 2);\r\n    const y = 0 | (padding + size / 2 - cell * 2);\r\n\r\n    function renderShape(colorIndex, shapes, index, rotationIndex, positions) {\r\n        const shapeIndex = parseHex(hash, index, 1);\r\n        let r = rotationIndex ? parseHex(hash, rotationIndex, 1) : 0;\r\n        \r\n        renderer.K/*beginShape*/(availableColors[selectedColorIndexes[colorIndex]]);\r\n        \r\n        for (let i = 0; i < positions.length; i++) {\r\n            graphics.t/*_transform*/ = new Transform(x + positions[i][0] * cell, y + positions[i][1] * cell, cell, r++ % 4);\r\n            shapes(shapeIndex, graphics, cell, i);\r\n        }\r\n        \r\n        renderer.L/*endShape*/();\r\n    }\r\n\r\n    // AVAILABLE COLORS\r\n    const hue = parseHex(hash, -7) / 0xfffffff,\r\n    \r\n          // Available colors for this icon\r\n          availableColors = colorTheme(hue, config),\r\n\r\n          // The index of the selected colors\r\n          selectedColorIndexes = [];\r\n\r\n    let index;\r\n\r\n    function isDuplicate(values) {\r\n        if (values.indexOf(index) >= 0) {\r\n            for (let i = 0; i < values.length; i++) {\r\n                if (selectedColorIndexes.indexOf(values[i]) >= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        index = parseHex(hash, 8 + i, 1) % availableColors.length;\r\n        if (isDuplicate([0, 4]) || // Disallow dark gray and dark color combo\r\n            isDuplicate([2, 3])) { // Disallow light gray and light color combo\r\n            index = 1;\r\n        }\r\n        selectedColorIndexes.push(index);\r\n    }\r\n\r\n    // ACTUAL RENDERING\r\n    // Sides\r\n    renderShape(0, outerShape, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]);\r\n    // Corners\r\n    renderShape(1, outerShape, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]);\r\n    // Center\r\n    renderShape(2, centerShape, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);\r\n    \r\n    renderer.finish();\r\n}\n\n/**\r\n * Computes a SHA1 hash for any value and returns it as a hexadecimal string.\r\n * \r\n * This function is optimized for minimal code size and rather short messages.\r\n * \r\n * @param {string} message \r\n */\r\nfunction sha1(message) {\r\n    const HASH_SIZE_HALF_BYTES = 40;\r\n    const BLOCK_SIZE_WORDS = 16;\r\n\r\n    // Variables\r\n    // `var` is used to be able to minimize the number of `var` keywords.\r\n    var i = 0,\r\n        f = 0,\r\n    \r\n        // Use `encodeURI` to UTF8 encode the message without any additional libraries\r\n        // We could use `unescape` + `encodeURI` to minimize the code, but that would be slightly risky\r\n        // since `unescape` is deprecated.\r\n        urlEncodedMessage = encodeURI(message) + \"%80\", // trailing '1' bit padding\r\n        \r\n        // This can be changed to a preallocated Uint32Array array for greater performance and larger code size\r\n        data = [],\r\n        dataSize,\r\n        \r\n        hashBuffer = [],\r\n\r\n        a = 0x67452301,\r\n        b = 0xefcdab89,\r\n        c = ~a,\r\n        d = ~b,\r\n        e = 0xc3d2e1f0,\r\n        hash = [a, b, c, d, e],\r\n\r\n        blockStartIndex = 0,\r\n        hexHash = \"\";\r\n\r\n    /**\r\n     * Rotates the value a specified number of bits to the left.\r\n     * @param {number} value  Value to rotate\r\n     * @param {number} shift  Bit count to shift.\r\n     */\r\n    function rotl(value, shift) {\r\n        return (value << shift) | (value >>> (32 - shift));\r\n    }\r\n\r\n    // Message data\r\n    for ( ; i < urlEncodedMessage.length; f++) {\r\n        data[f >> 2] = data[f >> 2] |\r\n            (\r\n                (\r\n                    urlEncodedMessage[i] == \"%\"\r\n                        // Percent encoded byte\r\n                        ? parseInt(urlEncodedMessage.substring(i + 1, i += 3), 16)\r\n                        // Unencoded byte\r\n                        : urlEncodedMessage.charCodeAt(i++)\r\n                )\r\n\r\n                // Read bytes in reverse order (big endian words)\r\n                << ((3 - (f & 3)) * 8)\r\n            );\r\n    }\r\n\r\n    // f is now the length of the utf8 encoded message\r\n    // 7 = 8 bytes (64 bit) for message size, -1 to round down\r\n    // >> 6 = integer division with block size\r\n    dataSize = (((f + 7) >> 6) + 1) * BLOCK_SIZE_WORDS;\r\n\r\n    // Message size in bits.\r\n    // SHA1 uses a 64 bit integer to represent the size, but since we only support short messages only the least\r\n    // significant 32 bits are set. -8 is for the '1' bit padding byte.\r\n    data[dataSize - 1] = f * 8 - 8;\r\n    \r\n    // Compute hash\r\n    for ( ; blockStartIndex < dataSize; blockStartIndex += BLOCK_SIZE_WORDS) {\r\n        for (i = 0; i < 80; i++) {\r\n            f = rotl(a, 5) + e + (\r\n\t\t\t\t\t// Ch\r\n\t\t\t\t\ti < 20 ? ((b & c) ^ ((~b) & d)) + 0x5a827999 :\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Parity\r\n\t\t\t\t\ti < 40 ? (b ^ c ^ d) + 0x6ed9eba1 :\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Maj\r\n\t\t\t\t\ti < 60 ? ((b & c) ^ (b & d) ^ (c & d)) + 0x8f1bbcdc :\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Parity\r\n                    (b ^ c ^ d) + 0xca62c1d6\r\n\t\t\t\t) + ( \r\n                    hashBuffer[i] = i < BLOCK_SIZE_WORDS\r\n                        // Bitwise OR is used to coerse `undefined` to 0\r\n                        ? (data[blockStartIndex + i] | 0)\r\n                        : rotl(hashBuffer[i - 3] ^ hashBuffer[i - 8] ^ hashBuffer[i - 14] ^ hashBuffer[i - 16], 1)\r\n\t\t\t\t);\r\n\r\n            e = d;\r\n            d = c;\r\n            c = rotl(b, 30);\r\n            b = a;\r\n            a = f;\r\n        }\r\n\r\n        hash[0] = a = ((hash[0] + a) | 0);\r\n        hash[1] = b = ((hash[1] + b) | 0);\r\n        hash[2] = c = ((hash[2] + c) | 0);\r\n        hash[3] = d = ((hash[3] + d) | 0);\r\n        hash[4] = e = ((hash[4] + e) | 0);\r\n    }\r\n\r\n    // Format hex hash\r\n    for (i = 0; i < HASH_SIZE_HALF_BYTES; i++) {\r\n        hexHash += (\r\n            (\r\n                // Get word (2^3 half-bytes per word)\r\n                hash[i >> 3] >>>\r\n\r\n                // Append half-bytes in reverse order\r\n                ((7 - (i & 7)) * 4)\r\n            ) \r\n            // Clamp to half-byte\r\n            & 0xf\r\n        ).toString(16);\r\n    }\r\n\r\n    return hexHash;\r\n}\n\n/**\r\n * Inputs a value that might be a valid hash string for Jdenticon and returns it \r\n * if it is determined valid, otherwise a falsy value is returned.\r\n */\r\nfunction isValidHash(hashCandidate) {\r\n    return /^[0-9a-f]{11,}$/i.test(hashCandidate) && hashCandidate;\r\n}\r\n\r\n/**\r\n * Computes a hash for the specified value. Currently SHA1 is used. This function\r\n * always returns a valid hash.\r\n */\r\nfunction computeHash(value) {\r\n    return sha1(value == null ? \"\" : \"\" + value);\r\n}\n\n/**\r\n * Renderer redirecting drawing commands to a canvas context.\r\n */\r\nclass CanvasRenderer {\r\n    /**\r\n     * @param {number=} iconSize\r\n     */\r\n    constructor(ctx, iconSize) {\r\n        const width = ctx.canvas.width,\r\n              height = ctx.canvas.height;\r\n        \r\n        ctx.save();\r\n        \r\n        if (!iconSize) {\r\n            iconSize = Math.min(width, height);\r\n            \r\n            ctx.translate(\r\n                ((width - iconSize) / 2) | 0,\r\n                ((height - iconSize) / 2) | 0);\r\n        }\r\n\r\n        this.l/*_ctx*/ = ctx;\r\n        this.k/*iconSize*/ = iconSize;\r\n        \r\n        ctx.clearRect(0, 0, iconSize, iconSize);\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n     */\r\n    m/*setBackground*/(fillColor) {\r\n        const ctx = this.l/*_ctx*/,\r\n              iconSize = this.k/*iconSize*/;\r\n\r\n        ctx.fillStyle = toCss3Color(fillColor);\r\n        ctx.fillRect(0, 0, iconSize, iconSize);\r\n    }\r\n\r\n    /**\r\n     * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n     * @param {string} fillColor Fill color on format #rrggbb[aa].\r\n     */\r\n    K/*beginShape*/(fillColor) {\r\n        const ctx = this.l/*_ctx*/;\r\n        ctx.fillStyle = toCss3Color(fillColor);\r\n        ctx.beginPath();\r\n    }\r\n\r\n    /**\r\n     * Marks the end of the currently drawn shape. This causes the queued paths to be rendered on the canvas.\r\n     */\r\n    L/*endShape*/() {\r\n        this.l/*_ctx*/.fill();\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the rendering queue.\r\n     * @param points An array of Point objects.\r\n     */\r\n    g/*addPolygon*/(points) {\r\n        const ctx = this.l/*_ctx*/;\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            ctx.lineTo(points[i].x, points[i].y);\r\n        }\r\n        ctx.closePath();\r\n    }\r\n\r\n    /**\r\n     * Adds a circle to the rendering queue.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    h/*addCircle*/(point, diameter, counterClockwise) {\r\n        const ctx = this.l/*_ctx*/,\r\n              radius = diameter / 2;\r\n        ctx.moveTo(point.x + radius, point.y + radius);\r\n        ctx.arc(point.x + radius, point.y + radius, radius, 0, Math.PI * 2, counterClockwise);\r\n        ctx.closePath();\r\n    }\r\n\r\n    /**\r\n     * Called when the icon has been completely drawn.\r\n     */\r\n    finish() {\r\n        this.l/*_ctx*/.restore();\r\n    }\r\n}\n\n/**\r\n * Draws an identicon to a context.\r\n * @param {CanvasRenderingContext2D} ctx - Canvas context on which the icon will be drawn at location (0, 0).\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nfunction drawIcon(ctx, hashOrValue, size, config) {\r\n    if (!ctx) {\r\n        throw new Error(\"No canvas specified.\");\r\n    }\r\n    \r\n    iconGenerator(new CanvasRenderer(ctx, size), \r\n        isValidHash(hashOrValue) || computeHash(hashOrValue), \r\n        config);\r\n}\n\n/**\r\n * Prepares a measure to be used as a measure in an SVG path, by\r\n * rounding the measure to a single decimal. This reduces the file\r\n * size of the generated SVG with more than 50% in some cases.\r\n */\r\nfunction svgValue(value) {\r\n    return ((value * 10 + 0.5) | 0) / 10;\r\n}\r\n\r\n/**\r\n * Represents an SVG path element.\r\n */\r\nclass SvgPath {\r\n    constructor() {\r\n        /**\r\n         * This property holds the data string (path.d) of the SVG path.\r\n         */\r\n        this.u/*dataString*/ = \"\";\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon with the current fill color to the SVG path.\r\n     * @param points An array of Point objects.\r\n     */\r\n    g/*addPolygon*/(points) {\r\n        let dataString = \"\";\r\n        for (let i = 0; i < points.length; i++) {\r\n            dataString += (i ? \"L\" : \"M\") + svgValue(points[i].x) + \" \" + svgValue(points[i].y);\r\n        }\r\n        this.u/*dataString*/ += dataString + \"Z\";\r\n    }\r\n\r\n    /**\r\n     * Adds a circle with the current fill color to the SVG path.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    h/*addCircle*/(point, diameter, counterClockwise) {\r\n        const sweepFlag = counterClockwise ? 0 : 1,\r\n              svgRadius = svgValue(diameter / 2),\r\n              svgDiameter = svgValue(diameter),\r\n              svgArc = \"a\" + svgRadius + \",\" + svgRadius + \" 0 1,\" + sweepFlag + \" \";\r\n            \r\n        this.u/*dataString*/ += \r\n            \"M\" + svgValue(point.x) + \" \" + svgValue(point.y + diameter / 2) +\r\n            svgArc + svgDiameter + \",0\" + \r\n            svgArc + (-svgDiameter) + \",0\";\r\n    }\r\n}\n\n/**\r\n * Renderer producing SVG output.\r\n */\r\nclass SvgRenderer {\r\n    /**\r\n     * @param {SvgElement|SvgWriter} target \r\n     */\r\n    constructor(target) {\r\n        /**\r\n         * @type {SvgPath}\r\n         */\r\n        this.v/*_path*/;\r\n        this.A/*_pathsByColor*/ = { };\r\n        this.M/*_target*/ = target;\r\n        this.k/*iconSize*/ = target.k/*iconSize*/;\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n     */\r\n    m/*setBackground*/(fillColor) {\r\n        const match = /^(#......)(..)?/.exec(fillColor),\r\n              opacity = match[2] ? parseHex(match[2], 0) / 255 : 1;\r\n        this.M/*_target*/.m/*setBackground*/(match[1], opacity);\r\n    }\r\n\r\n    /**\r\n     * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n     * @param {string} color Fill color on format #xxxxxx.\r\n     */\r\n    K/*beginShape*/(color) {\r\n        this.v/*_path*/ = this.A/*_pathsByColor*/[color] || (this.A/*_pathsByColor*/[color] = new SvgPath());\r\n    }\r\n\r\n    /**\r\n     * Marks the end of the currently drawn shape.\r\n     */\r\n    L/*endShape*/() { }\r\n\r\n    /**\r\n     * Adds a polygon with the current fill color to the SVG.\r\n     * @param points An array of Point objects.\r\n     */\r\n    g/*addPolygon*/(points) {\r\n        this.v/*_path*/.g/*addPolygon*/(points);\r\n    }\r\n\r\n    /**\r\n     * Adds a circle with the current fill color to the SVG.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    h/*addCircle*/(point, diameter, counterClockwise) {\r\n        this.v/*_path*/.h/*addCircle*/(point, diameter, counterClockwise);\r\n    }\r\n\r\n    /**\r\n     * Called when the icon has been completely drawn.\r\n     */\r\n    finish() { \r\n        const pathsByColor = this.A/*_pathsByColor*/;\r\n        for (let color in pathsByColor) {\r\n            // hasOwnProperty cannot be shadowed in pathsByColor\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (pathsByColor.hasOwnProperty(color)) {\r\n                this.M/*_target*/.N/*appendPath*/(color, pathsByColor[color].u/*dataString*/);\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * Renderer producing SVG output.\r\n */\r\nclass SvgWriter {\r\n    /**\r\n     * @param {number} iconSize - Icon width and height in pixels.\r\n     */\r\n    constructor(iconSize) {\r\n        this.k/*iconSize*/ = iconSize;\r\n        this.B/*_s*/ =\r\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + \r\n            iconSize + '\" height=\"' + iconSize + '\" viewBox=\"0 0 ' + \r\n            iconSize + ' ' + iconSize + '\">';\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb.\r\n     * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n     */\r\n    m/*setBackground*/(fillColor, opacity) {\r\n        if (opacity) {\r\n            this.B/*_s*/ += '<rect width=\"100%\" height=\"100%\" fill=\"' + \r\n                fillColor + '\" opacity=\"' + opacity.toFixed(2) + '\"/>';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes a path to the SVG string.\r\n     * @param {string} color Fill color on format #rrggbb.\r\n     * @param {string} dataString The SVG path data string.\r\n     */\r\n    N/*appendPath*/(color, dataString) {\r\n        this.B/*_s*/ += '<path fill=\"' + color + '\" d=\"' + dataString + '\"/>';\r\n    }\r\n\r\n    /**\r\n     * Gets the rendered image as an SVG string.\r\n     */\r\n    toString() {\r\n        return this.B/*_s*/ + \"</svg>\";\r\n    }\r\n}\n\n/**\r\n * Draws an identicon as an SVG string.\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n * @returns {string} SVG string\r\n */\r\nfunction toSvg(hashOrValue, size, config) {\r\n    const writer = new SvgWriter(size);\r\n    iconGenerator(new SvgRenderer(writer), \r\n        isValidHash(hashOrValue) || computeHash(hashOrValue),\r\n        config);\r\n    return writer.toString();\r\n}\n\nconst ICON_TYPE_SVG = 1;\r\n\r\nconst ICON_TYPE_CANVAS = 2;\r\n\r\n/**\r\n * @noinline\r\n */\r\nconst HASH_ATTRIBUTE = \"data-jdenticon-hash\";\r\n\r\n/**\r\n * @noinline\r\n */\r\nconst VALUE_ATTRIBUTE = \"data-jdenticon-value\";\r\n\r\nconst documentQuerySelectorAll = /** @type {!Function} */ (\r\n    typeof document !== \"undefined\" && document.querySelectorAll.bind(document));\r\n\r\nfunction getIdenticonType(el) {\r\n    if (el) {\r\n        const tagName = el[\"tagName\"];\r\n\r\n        if (/^svg$/i.test(tagName)) {\r\n            return ICON_TYPE_SVG;\r\n        }\r\n\r\n        if (/^canvas$/i.test(tagName) && \"getContext\" in el) {\r\n            return ICON_TYPE_CANVAS;\r\n        }\r\n    }\r\n}\n\n/**\r\n * Creates a new element and adds it to the specified parent.\r\n * @param {Element} parentNode\r\n * @param {string} name\r\n * @param {...(string|number)} keyValuePairs\r\n */\r\nfunction SvgElement_append(parentNode, name, ...keyValuePairs) {\r\n    const el = document.createElementNS(\"http://www.w3.org/2000/svg\", name);\r\n    \r\n    for (let i = 0; i + 1 < keyValuePairs.length; i += 2) {\r\n        el.setAttribute(\r\n            /** @type {string} */ (keyValuePairs[i]),\r\n            /** @type {string|number} */ (keyValuePairs[i + 1]),\r\n            );\r\n    }\r\n\r\n    parentNode.appendChild(el);\r\n}\r\n\r\n\r\n/**\r\n * Renderer producing SVG output.\r\n */\r\nclass SvgElement {\r\n    /**\r\n     * @param {Element} element - Target element\r\n     */\r\n    constructor(element) {\r\n        // Don't use the clientWidth and clientHeight properties on SVG elements\r\n        // since Firefox won't serve a proper value of these properties on SVG\r\n        // elements (https://bugzilla.mozilla.org/show_bug.cgi?id=874811)\r\n        // Instead use 100px as a hardcoded size (the svg viewBox will rescale \r\n        // the icon to the correct dimensions)\r\n        const iconSize = this.k/*iconSize*/ = Math.min(\r\n            (Number(element.getAttribute(\"width\")) || 100),\r\n            (Number(element.getAttribute(\"height\")) || 100)\r\n            );\r\n        this.O/*_el*/ = element;\r\n        \r\n        // Clear current SVG child elements\r\n        while (element.firstChild) {\r\n            element.removeChild(element.firstChild);\r\n        }\r\n        \r\n        // Set viewBox attribute to ensure the svg scales nicely.\r\n        element.setAttribute(\"viewBox\", \"0 0 \" + iconSize + \" \" + iconSize);\r\n        element.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb.\r\n     * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n     */\r\n    m/*setBackground*/(fillColor, opacity) {\r\n        if (opacity) {\r\n            SvgElement_append(this.O/*_el*/, \"rect\",\r\n                \"width\", \"100%\",\r\n                \"height\", \"100%\",\r\n                \"fill\", fillColor,\r\n                \"opacity\", opacity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a path to the SVG element.\r\n     * @param {string} color Fill color on format #xxxxxx.\r\n     * @param {string} dataString The SVG path data string.\r\n     */\r\n    N/*appendPath*/(color, dataString) {\r\n        SvgElement_append(this.O/*_el*/, \"path\",\r\n            \"fill\", color,\r\n            \"d\", dataString);\r\n    }\r\n}\n\n/**\r\n * Updates the identicon in the specified `<canvas>` or `<svg>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nfunction update(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType) {\r\n            return iconType == ICON_TYPE_SVG ? \r\n                new SvgRenderer(new SvgElement(el)) : \r\n                new CanvasRenderer(el.getContext(\"2d\"));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified `<canvas>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nfunction updateCanvas(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType == ICON_TYPE_CANVAS) {\r\n            return new CanvasRenderer(el.getContext(\"2d\"));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified `<svg>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nfunction updateSvg(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType == ICON_TYPE_SVG) {\r\n            return new SvgRenderer(new SvgElement(el));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified canvas or svg elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number|undefined} config\r\n * @param {function(Element,number)} rendererFactory - Factory function for creating an icon renderer.\r\n */\r\nfunction renderDomElement(el, hashOrValue, config, rendererFactory) {\r\n    if (typeof el === \"string\") {\r\n        if (documentQuerySelectorAll) {\r\n            const elements = documentQuerySelectorAll(el);\r\n            for (let i = 0; i < elements.length; i++) {\r\n                renderDomElement(elements[i], hashOrValue, config, rendererFactory);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    \r\n    // Hash selection. The result from getValidHash or computeHash is \r\n    // accepted as a valid hash.\r\n    const hash = \r\n        // 1. Explicit valid hash\r\n        isValidHash(hashOrValue) ||\r\n        \r\n        // 2. Explicit value (`!= null` catches both null and undefined)\r\n        hashOrValue != null && computeHash(hashOrValue) ||\r\n        \r\n        // 3. `data-jdenticon-hash` attribute\r\n        isValidHash(el.getAttribute(HASH_ATTRIBUTE)) ||\r\n        \r\n        // 4. `data-jdenticon-value` attribute. \r\n        // We want to treat an empty attribute as an empty value. \r\n        // Some browsers return empty string even if the attribute \r\n        // is not specified, so use hasAttribute to determine if \r\n        // the attribute is specified.\r\n        el.hasAttribute(VALUE_ATTRIBUTE) && computeHash(el.getAttribute(VALUE_ATTRIBUTE));\r\n    \r\n    if (!hash) {\r\n        // No hash specified. Don't render an icon.\r\n        return;\r\n    }\r\n    \r\n    const renderer = rendererFactory(el, getIdenticonType(el));\r\n    if (renderer) {\r\n        // Draw icon\r\n        iconGenerator(renderer, hash, config);\r\n    }\r\n}\n\n// This file is compiled to dist/jdenticon-module.mjs\r\n\r\n/**\r\n * Specifies the version of the Jdenticon package in use.\r\n * @type {string}\r\n */\r\nconst version = \"3.0.1\";\r\n\r\n/**\r\n * Specifies which bundle of Jdenticon that is used.\r\n * @type {string}\r\n */\r\nconst bundle = \"browser-esm\";\n\n\n\n\n//# sourceURL=webpack:///./node_modules/jdenticon/dist/jdenticon-module.mjs?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jdenticon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jdenticon */ \"./node_modules/jdenticon/dist/jdenticon-module.mjs\");\n\n\nlet ws;\nlet username = \"Anonymous\";\n// TODO identicon cache?\n\nfunction log(message) {\n    let m = document.createElement(\"div\");\n    let output = document.getElementById(\"messages\");\n    m.textContent = message;\n    m.className = \"message\";\n\n    let oldScrollHeight = output.scrollHeight;\n    output.appendChild(m);\n    conditionalMessageScroll(oldScrollHeight);\n}\n\nfunction initUserlist(connected) {\n    // fill user list\n    let userlist = document.createElement(\"div\");\n    for (let user of connected) {\n        let userEntry = document.createElement(\"div\");\n        userEntry.className = \"user-connected\";\n        userEntry.dataset.userid = user.userid;\n\n        let userImage = document.createElement(\"div\");\n        userImage.className = \"user-image\";\n        userImage.innerHTML = Object(jdenticon__WEBPACK_IMPORTED_MODULE_0__[/* toSvg */ \"a\"])(user.userid, 100);\n\n        let userName = document.createElement(\"div\");\n        userName.className = \"user-name\";\n        userName.innerHTML = user.username;\n\n        userEntry.appendChild(userImage);\n        userEntry.appendChild(userName);\n\n        userlist.appendChild(userEntry);\n    }\n    document.getElementById(\"userlist\").innerHTML = userlist.innerHTML;\n}\n\nfunction conditionalMessageScroll(oldScrollHeight) {\n    let messages = document.getElementById(\"messages\");\n    console.log(oldScrollHeight, messages.scrollTop + messages.clientHeight);\n    if (oldScrollHeight === messages.scrollTop + messages.clientHeight) {\n        // only scroll if scrolled to bottom before\n        messages.scrollTop = messages.scrollHeight;\n    }\n}\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    ws = new WebSocket(((window.location.protocol === \"https:\") ? \"wss://\" : \"ws://\") + window.location.host + \"/ws\");\n\n    ws.onopen = function() {\n        log(\"Connected to chatroom\");\n        document.getElementById(\"submit-icon\").style.color = \"#50913F\";\n        document.getElementById(\"submit\").style.cursor = \"pointer\";\n    };\n\n    ws.onclose = function() {\n        log(\"Disconnected from chatroom\");\n        document.getElementById(\"submit-icon\").style.color = \"darkgrey\";\n        document.getElementById(\"submit\").style.cursor = \"not-allowed\";\n        ws = null;\n    };\n\n    ws.onmessage = function(evt) {\n        //log(\"RESPONSE: \" + evt.data);\n\n        let msg = JSON.parse(evt.data);\n        switch (msg.action) {\n            case \"init\":\n                // fill user data\n                document.getElementById(\"username\").value = msg.user.username;\n                document.getElementById(\"usericon\").innerHTML = Object(jdenticon__WEBPACK_IMPORTED_MODULE_0__[/* toSvg */ \"a\"])(msg.user.userid, 100);\n                initUserlist(msg.connected);\n                break;\n            case \"broadcast\":\n                let m = document.createElement(\"div\");\n                m.className = \"message\";\n\n                let text = document.createElement(\"div\");\n                text.className = \"message-text\";\n                text.textContent = `${msg.sender.username}: ${msg.text}`;\n\n                let identicon = document.createElement(\"div\");\n                identicon.className = \"message-image\";\n                identicon.innerHTML = Object(jdenticon__WEBPACK_IMPORTED_MODULE_0__[/* toSvg */ \"a\"])(msg.sender.userid, 100);\n\n                m.appendChild(identicon);\n                m.appendChild(text);\n\n                let messages = document.getElementById(\"messages\");\n                let oldScrollHeight = messages.scrollHeight;\n                messages.appendChild(m);\n                conditionalMessageScroll(oldScrollHeight);\n\n                //log(`${msg.sender.username}: ${msg.text}`);\n                break;\n            case \"systemBroadcast\":\n                log(`${msg.text}`);\n                break;\n            case \"newUser\":\n                let userEntry = document.createElement(\"div\");\n                userEntry.className = \"user-connected\";\n                userEntry.dataset.userid = msg.sender.userid;\n\n                let userImage = document.createElement(\"div\");\n                userImage.className = \"user-image\";\n                userImage.innerHTML = Object(jdenticon__WEBPACK_IMPORTED_MODULE_0__[/* toSvg */ \"a\"])(msg.sender.userid, 100);\n\n                let userName = document.createElement(\"div\");\n                userName.className = \"user-name\";\n                userName.innerHTML = msg.sender.username;\n\n                userEntry.appendChild(userImage);\n                userEntry.appendChild(userName);\n\n                document.getElementById(\"userlist\").appendChild(userEntry);\n                break;\n            case \"removeUser\":\n                document.querySelectorAll(`.user-connected[data-userid='${msg.sender.userid}']`)[0].remove();\n                break;\n            case \"usernameChange\":\n                let usernameElem = document.querySelectorAll(`.user-connected[data-userid='${msg.sender.userid}']`)[0].children[1];\n                log(`User ${usernameElem.textContent} changed name to ${msg.sender.username}`);\n                usernameElem.textContent = msg.sender.username;\n                break;\n            default:\n                console.log(\"Unhandled message action:\", msg);\n        }\n    };\n    ws.onerror = function(evt) {\n        log(\"ERROR: \" + evt.data);\n    };\n\n}, false);\n\ndocument.getElementById(\"submit\").addEventListener(\"click\", function() {\n    let input = document.getElementById(\"message-entry\");\n\n    if (!ws || input.value.length === 0) {\n        return false;\n    }\n\n    let msg = {\n        //broadcast only for now\n        action: \"broadcast\",\n        text: input.value.trim(),\n    };\n\n    ws.send(JSON.stringify(msg));\n    input.value = \"\";\n    return false;\n}, false);\n\ndocument.getElementById(\"message-entry\").addEventListener(\"keypress\", function(evt) {\n    if (evt.key === \"Enter\" && evt.shiftKey) {\n        document.getElementById(\"submit\").click();\n        evt.preventDefault();\n    }\n    return false;\n}, false);\n\ndocument.getElementById(\"username\").addEventListener(\"focusout\", function() {\n    let input = document.getElementById(\"username\");\n    if (username !== input.value) {\n        username = input.value;\n        let usernameChanged = {\n            action: \"usernameChange\",\n            username: input.value,\n        };\n        ws.send(JSON.stringify(usernameChanged));\n    }\n}, false);\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ })

/******/ });